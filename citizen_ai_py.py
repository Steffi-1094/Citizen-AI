# -*- coding: utf-8 -*-
"""citizen AI.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZF9w3AbiIEgSjU-x9LoUNDwbLCluqoQm
"""

# Install dependencies
!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# --------------------------
# 1. Load model and tokenizer
# --------------------------
model_name = "gpt2-medium"  # Alternative model for demonstration
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# GPT2 does not have a pad token by default, set it to eos_token
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# --------------------------
# 2. Prompt templates
# --------------------------
def get_health_analysis_prompt(city_name):
    return (
        f"Generate a detailed health and wellness report for the city of {city_name}.\n"
        "Include the following:\n"
        "1. Common health issues and statistics\n"
        "2. Available wellness programs and facilities\n"
        "3. Overall health assessment and recommendations\n\n"
        f"City: {city_name}\nReport:"
    )

def get_citizen_query_prompt(query):
    return (
        "You are a government health assistant. Provide accurate, clear, and helpful advice "
        "regarding public health, wellness programs, or health policies based on the following query:\n\n"
        f"Query: {query}\nResponse:"
    )

# --------------------------
# 3. Generate response function
# --------------------------
def generate_response(prompt, max_length=512, temperature=0.7):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=256)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=temperature,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id,
            top_p=0.9,
            top_k=50,
            num_return_sequences=1
        )

    text = tokenizer.decode(outputs[0], skip_special_tokens=True)
    # Remove the prompt from the output to get only the generated part
    response = text[len(prompt):].strip()
    return response

# --------------------------
# 4. Health Analysis function with validation
# --------------------------
def health_analysis(city_name, temperature, max_tokens):
    city_name = city_name.strip()
    if not city_name:
        return "Please enter a valid city name."
    prompt = get_health_analysis_prompt(city_name)
    return generate_response(prompt, max_length=max_tokens, temperature=temperature)

# --------------------------
# 5. Citizen Health Query function with validation
# --------------------------
def health_citizen_query(query, temperature, max_tokens):
    query = query.strip()
    if not query:
        return "Please enter a valid health-related question."
    prompt = get_citizen_query_prompt(query)
    return generate_response(prompt, max_length=max_tokens, temperature=temperature)

# --------------------------
# 6. Build Gradio app
# --------------------------
with gr.Blocks() as app:
    gr.Markdown("# Health & Wellness Advisory AI (Alternative)")

    with gr.Tabs():
        # Tab 1: Health Analysis
        with gr.TabItem("Health Analysis"):
            with gr.Row():
                with gr.Column(scale=1):
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    temperature_slider = gr.Slider(
                        minimum=0.1, maximum=1.0, value=0.7, step=0.05,
                        label="Temperature (Creativity)"
                    )
                    max_tokens_slider = gr.Slider(
                        minimum=100, maximum=1024, value=512, step=50,
                        label="Max Tokens"
                    )
                    analyze_btn = gr.Button("Analyze Health")

                with gr.Column(scale=2):
                    city_output = gr.Textbox(label="Health Analysis Report", lines=20)

            analyze_btn.click(
                health_analysis,
                inputs=[city_input, temperature_slider, max_tokens_slider],
                outputs=city_output
            )

        # Tab 2: Citizen Health Queries
        with gr.TabItem("Citizen Health Queries"):
            with gr.Row():
                with gr.Column(scale=1):
                    citizen_query = gr.Textbox(
                        label="Your Health Question",
                        placeholder="Ask about public health, wellness programs, or policies...",
                        lines=4
                    )
                    temperature_slider_q = gr.Slider(
                        minimum=0.1, maximum=1.0, value=0.7, step=0.05,
                        label="Temperature (Creativity)"
                    )
                    max_tokens_slider_q = gr.Slider(
                        minimum=100, maximum=1024, value=512, step=50,
                        label="Max Tokens"
                    )
                    query_btn = gr.Button("Get Health Advice")

                with gr.Column(scale=2):
                    citizen_output = gr.Textbox(label="Government Health Response", lines=20)

            query_btn.click(
                health_citizen_query,
                inputs=[citizen_query, temperature_slider_q, max_tokens_slider_q],
                outputs=citizen_output
            )

# --------------------------
# 7. Launch app
# --------------------------
app.launch(share=True)